{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { clearProjects } from \"./projects\";\nimport setAuthToken from \"../utils/setAuthToken\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\"; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\" http://localhost:5000/user/user\"); // console.log(res);\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const registerUser = ({\n  username,\n  email,\n  password\n}) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"http://localhost:5000/users/register\", body, config);\n    console.log(res.data);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n    dispatch(setAlert(\"User registered successfully!\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"error\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login User\n\nexport const loginUser = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"http://localhost:5000/user/login\", body, config); // console.log(res.data);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    window.location.reload(false);\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"error\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //Logout\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  window.localStorage.removeItem(\"token\");\n  dispatch(clearProjects());\n  dispatch(setAlert(\"Logged out successfully\", \"info\"));\n};","map":{"version":3,"sources":["/Users/akhilthomas/Desktop/tracker/tracker/client/src/actions/auth.js"],"names":["axios","setAlert","clearProjects","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","registerUser","username","email","password","config","headers","body","JSON","stringify","post","console","log","errors","response","forEach","error","msg","loginUser","window","location","reload","logout","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { clearProjects } from \"./projects\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\n\n//Load User\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get(\" http://localhost:5000/user/user\");\n    // console.log(res);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n//Register User\n\nexport const registerUser = ({ username, email, password }) => async (\n  dispatch\n) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const body = JSON.stringify({ username, email, password });\n\n  try {\n    const res = await axios.post(\n      \"http://localhost:5000/users/register\",\n      body,\n      config\n    );\n    console.log(res.data);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n    dispatch(setAlert(\"User registered successfully!\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"error\")));\n    }\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n//Login User\n\nexport const loginUser = (email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post(\n      \"http://localhost:5000/user/login\",\n      body,\n      config\n    );\n    // console.log(res.data);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n    window.location.reload(false);\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"error\")));\n    }\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n//Logout\n\nexport const logout = () => (dispatch) => {\n  dispatch({\n    type: LOGOUT,\n  });\n  window.localStorage.removeItem(\"token\");\n  dispatch(clearProjects());\n  dispatch(setAlert(\"Logged out successfully\", \"info\"));\n};\n"]},"metadata":{},"sourceType":"module"}