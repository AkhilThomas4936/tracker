{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport setAuthToken from \"../utils/setAuthToken\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\"; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {} catch (err) {}\n}; //Register User\n\nexport const registerUser = ({\n  username,\n  email,\n  password\n}) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"http://localhost:5000/users/register\", body, config);\n    console.log(res.data);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(setAlert(\"User registered successfully!\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"error\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/akhilthomas/Desktop/tracker/tracker/client/src/actions/auth.js"],"names":["axios","setAlert","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","loadUser","dispatch","localStorage","token","err","registerUser","username","email","password","config","headers","body","JSON","stringify","res","post","console","log","data","type","payload","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,UAAU,GAAG,YAAnB,C,CAEP;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBR,IAAAA,YAAY,CAACO,YAAY,CAACC,KAAd,CAAZ;AACD;;AACD,MAAI,CACH,CADD,CACE,OAAOC,GAAP,EAAY,CAAE;AACjB,CANM,C,CAOP;;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA;AAAnB,CAAD,KAAmC,OAC7DP,QAD6D,KAE1D;AACH,QAAMQ,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMM,GAAG,GAAG,MAAMrB,KAAK,CAACsB,IAAN,CAChB,sCADgB,EAEhBJ,IAFgB,EAGhBF,MAHgB,CAAlB;AAKAO,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB;AACAjB,IAAAA,QAAQ,CAAC;AACPkB,MAAAA,IAAI,EAAEvB,gBADC;AAEPwB,MAAAA,OAAO,EAAEN,GAAG,CAACI;AAFN,KAAD,CAAR;AAIAjB,IAAAA,QAAQ,CAACP,QAAQ,CAAC,+BAAD,EAAkC,SAAlC,CAAT,CAAR;AACD,GAZD,CAYE,OAAOU,GAAP,EAAY;AACZ,UAAMiB,MAAM,GAAGjB,GAAG,CAACkB,QAAJ,CAAaJ,IAAb,CAAkBG,MAAjC;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWvB,QAAQ,CAACP,QAAQ,CAAC8B,KAAK,CAACC,GAAP,EAAY,OAAZ,CAAT,CAAlC;AACD;;AACDxB,IAAAA,QAAQ,CAAC;AACPkB,MAAAA,IAAI,EAAEtB;AADC,KAAD,CAAR;AAGD;AACF,CAjCM","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\n\n//Load User\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n  } catch (err) {}\n};\n//Register User\n\nexport const registerUser = ({ username, email, password }) => async (\n  dispatch\n) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const body = JSON.stringify({ username, email, password });\n\n  try {\n    const res = await axios.post(\n      \"http://localhost:5000/users/register\",\n      body,\n      config\n    );\n    console.log(res.data);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(setAlert(\"User registered successfully!\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"error\")));\n    }\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}